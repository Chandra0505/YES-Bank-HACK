authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "eR2xXlyHZIj8poBUnGkzEf31U"
consumerSecret <- "KgKsnBJobCy6oOpB5SEqIq6aSoh4ktfXNjC5DhmC8ghtGDy3jK"
accessToken <- "923485624803270656-GiJXO4Z1VTZWzk0Uhp08o7vheY75CC2"
accessTokenSecret <- "xv4fAEjeSX8E9uhh15mlce7vvb9Qgoti0nu6a2Sxt9DN8"
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessTokenSecret)
mentions (n=15)
### Tweets from self timeline and also from a specif user timeline
homeTimeline (n=15)
tweet=userTimeline('@yadavakhilesh',n=10)
userTimeline('@yadavakhilesh',n=10)
library(RColorBrewer)
library(wordcloud)
library(tm)
library(twitteR)
library(ROAuth)
library(plyr)
library(stringr)
library(base64enc)
library(SnowballC)
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
### Add various tokens and keys for authentication
consumerKey <- "eR2xXlyHZIj8poBUnGkzEf31U"
consumerSecret <- "KgKsnBJobCy6oOpB5SEqIq6aSoh4ktfXNjC5DhmC8ghtGDy3jK"
accessToken <- "923485624803270656-GiJXO4Z1VTZWzk0Uhp08o7vheY75CC2"
accessTokenSecret <- "xv4fAEjeSX8E9uhh15mlce7vvb9Qgoti0nu6a2Sxt9DN8"
setup_twitter_oauth(consumerKey,consumerSecret,accessToken,accessTokenSecret)
### Now search the tweet of your desire
karnataka_cm <- searchTwitter("#Kapil Sibal" ,n=800,lang = "en")
karnataka_cm_text <- sapply(karnataka_cm, function(x) x$getText())
karnataka_cm_text_corpus <- Corpus(VectorSource(karnataka_cm_text))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, removePunctuation)
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, content_transformer(tolower))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, function(x)removeWords(x,stopwords()))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, removeWords, c('RT', 'are','that'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, content_transformer(removeURL))
###Now we make a matrix and data frame
a_2 <- TermDocumentMatrix(karnataka_cm_text_corpus)
a_2 <- as.matrix(a_2)
a_2 <- sort(rowSums(a_2),decreasing=TRUE)
a_2 <- data.frame(word = names(a_2),freq=a_2)
### Final function to draw a word cloud
head(a_2, 10)
set.seed(1234)
wordcloud(karnataka_cm_text_corpus,min.freq=1,max.words=80,scale=c(2.1,2),random.order=F,colors=brewer.pal(8,'Dark2'))
barplot(a_2[1:10,]$freq, las = 2,names.arg = a_2[1:10,]$word,col ='yellow',main ='Most frequent words',ylab = 'Word frequencies')
wordcloud(karnataka_cm_text_corpus,min.freq=1,max.words=80,scale=c(2.1,2),random.order=F,colors=brewer.pal(8,'Dark2'))
### Now search the tweet of your desire
karnataka_cm <- searchTwitter("#karnatakafloortest" ,n=800,lang = "en")
karnataka_cm_text <- sapply(karnataka_cm, function(x) x$getText())
karnataka_cm_text_corpus <- Corpus(VectorSource(karnataka_cm_text))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, removePunctuation)
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, content_transformer(tolower))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, function(x)removeWords(x,stopwords()))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, removeWords, c('RT', 'are','that'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, content_transformer(removeURL))
###Now we make a matrix and data frame
a_2 <- TermDocumentMatrix(karnataka_cm_text_corpus)
a_2 <- as.matrix(a_2)
a_2 <- sort(rowSums(a_2),decreasing=TRUE)
a_2 <- data.frame(word = names(a_2),freq=a_2)
### Final function to draw a word cloud
head(a_2, 10)
set.seed(1234)
wordcloud(karnataka_cm_text_corpus,min.freq=1,max.words=80,scale=c(2.1,2),random.order=F,colors=brewer.pal(8,'Dark2'))
wordcloud(karnataka_cm_text_corpus,min.freq=1,max.words=80,scale=c(2.1,1),random.order=F,colors=brewer.pal(8,'Dark2'))
wordcloud(karnataka_cm_text_corpus,min.freq=1,max.words=80,scale=c(2,1.2),random.order=F,colors=brewer.pal(8,'Dark2'))
### Now search the tweet of your desire
karnataka_cm <- searchTwitter("#deadpool" ,n=800,lang = "en")
karnataka_cm_text <- sapply(karnataka_cm, function(x) x$getText())
karnataka_cm_text_corpus <- Corpus(VectorSource(karnataka_cm_text))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, removePunctuation)
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, content_transformer(tolower))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, function(x)removeWords(x,stopwords()))
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, removeWords, c('RT', 'are','that'))
removeURL <- function(x) gsub('http[[:alnum:]]*', '', x)
karnataka_cm_text_corpus <- tm_map(karnataka_cm_text_corpus, content_transformer(removeURL))
###Now we make a matrix and data frame
a_2 <- TermDocumentMatrix(karnataka_cm_text_corpus)
a_2 <- as.matrix(a_2)
a_2 <- sort(rowSums(a_2),decreasing=TRUE)
a_2 <- data.frame(word = names(a_2),freq=a_2)
### Final function to draw a word cloud
head(a_2, 10)
set.seed(1234)
wordcloud(karnataka_cm_text_corpus,min.freq=1,max.words=80,scale=c(2,1.2),random.order=F,colors=brewer.pal(8,'Dark2'))
barplot(a_2[1:10,]$freq, las = 2,names.arg = a_2[1:10,]$word,col ='yellow',main ='Most frequent words',ylab = 'Word frequencies')
swirl()
load(swirl)
library(swirl)
install.packages("swirl")
library(swirl)
ls()
rm(list = ls())
ls
()
ls()
swirl()
TRUE==TRUE
(FALSE==FALSE)==FALSE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
5==7
5!==7
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
submit()
bye()
library(swirl)
ls
ls()
rm(list=ls())
ls()
swirl()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit
submit()
submit()
telegram("I love you")
bye()
strtoi(c("0xff", "077", "123"))
plot(a,t,type="l")
zm()
a <- c(1,2,3,4,5,7,9,6,45,55)
t <- c(1:10)
k <- data.frame(a,t)
plot(a,t,type="l")
zm()
library(zoom)
library(ggplot2)
library(zoom)
a <- c(1,2,3,4,5,7,9,6,45,55)
t <- c(1:10)
k <- data.frame(a,t)
plot(a,t,type="l")
zm()
a <- c(55:1100)
t <- c(1:1000)
k <- data.frame(a,t)
a <- c(200:300)
t <- c(1:100)
k <- data.frame(a,t)
a <- c(200:300)
t <- c(1:100)
k <- data.frame(a,t)
a <- c(200:300)
t <- c(0:100)
k <- data.frame(a,t)
k
plot(a,t,type="l")
zm()
?sample
a <- sample(20000:30000,1000)
t <- c(0:10000,1000)
k <- data.frame(a,t)
a <- sample(20002:30000,1000)
t <- c(0:10000,1000)
k <- data.frame(a,t)
a <- sample(20002:30000,1000)
t <- c(1:10000,1000)
k <- data.frame(a,t)
a <- sample(20002:30000,1000)
t <- c(2:10000,1000)
k <- data.frame(a,t)
plot(a,t,type="l")
zm()
a <- sample(20002:30000,1000)
t <- sample(2:10000,1000)
k <- data.frame(a,t)
k
plot(a,t,type="l")
zm()
shiny::runApp('shiny/app')
runApp('shiny/app')
install.packages("plotly")
df <- read.csv("movie_metadata.csv",sep=",")
df
ggplot(data=df,aes(num_critic_for_reviews,duration))+
geom_line()
df <- read.csv("movie_metadata.csv",sep=",",na.rm = TRUE)
ggplot(data=df,aes(num_critic_for_reviews,duration))+
geom_line()
str(df)
ggplot(data=df,aes(num_critic_for_reviews,duration))+
geom_line()
df <- read.csv("movie_metadata.csv",sep=",")
df
ggplot(data=df,aes(num_critic_for_reviews,duration))+
geom_line()
ggplot(data=df,aes(num_critic_for_reviews,duration))
ggplot(data=df,aes(num_critic_for_reviews,duration))+geom_line()
View(df)
?read.csv
k
ggplot(data = k, aes(a,t)) + geom_line()
ggplotly(k, tooltip = c("city"))
ggplotly(k, tooltip = c("city"))
zm()
library(plotly)
k
ggplot(data = k, aes(a,t)) + geom_line()
ggplotly(k, tooltip = c("city"))
zm()
zm()
a <- sample(20002:30000,1000)
t <- sample(2:10000,1000)
k <- data.frame(a,t)
plot(a,t,type="l")
zm()
a <- sample(20002:30000,1000)
t <- sample(2:10000,1000)
k <- data.frame(a,t)
plot(a,t,type="l")
zm()
a <- sample(20002:30000,1000)
t <- sample(2:10000,1000)
k <- data.frame(a,t)
plot(a,t,type="l")
zm()
?plot
a <- sample(10000:500000,100)
b <- sample(20000:480000,100)
df <- data.frame(a,b)
plot(df,type = "l")
##ggplot(data = df, aes(a,b)) + geom_line()
zm()
##ggplot(data = df, aes(a,b)) + geom_line()
zm()
library(zoom)
a <- sample(10000:500000,100)
b <- sample(20000:480000,100)
df <- data.frame(a,b)
plot(df,type = "l")
##ggplot(data = df, aes(a,b)) + geom_line()
zm()
##plot(df,type = "l")
ggplot(data = df, aes(a,b)) + geom_line()
library(ggplot2)
ggplot(data = df, aes(a,b)) + geom_line()
zm()
a <- sample(10000:500000,200)
b <- sample(20000:480000,200)
df <- data.frame(a,b)
##plot(df,type = "l")
ggplot(data = df, aes(a,b)) + geom_line()
zm()
plot(df,type = "l")
##ggplot(data = df, aes(a,b)) + geom_line()
zm()
library(ggplot2)
library(zoom)
a <- sample(10000:500000,200)
b <- sample(20000:480000,200)
df <- data.frame(a,b)
##plot(df,type = "l")
ggplot(data = df, aes(a,b)) + geom_line()
zm()
a <- sample(10000:500000,200)
b <- sample(20000:480000,200)
df <- data.frame(a,b)
##plot(df,type = "l")
ggplot(data = df, aes(a,b)) + geom_line()
ggplotly(df)
library(plotly)
(df <- data.frame(a,b))
ggplot(data = df, aes(a,b)) + geom_line()
ggplotly(df)
k<-ggplot(data = df, aes(a,b)) + geom_line()
ggplotly(k)
library(ggplot2)
a <- sample(10000:50000,200)
b <- sample(20000:48000,200)
df <- data.frame(a,b)
t <- ggplot(data = df,aes(a,b))+geom_line()
a <- sample(10000:50000,200)
b <- sample(20000:48000,200)
df <- data.frame(a,b)
df
g
df <- data.frame(a,b)
t
ggplotly(t)
library(plotly)
ggplotly(t)
?plot
a <- sample(10000:50000,2000000)
b <- sample(20000:48000,2000000)
df <- data.frame(a,b)
t <- ggplot(data = df,aes(a,b))+geom_line()
df
ggplotly(t)
library(zoom)
plot(df,type = "l")
zm()
zm()
install.packages("rattle")
library(rattle)
library(rattle)
library(rattle)
library(rattle)
rattle(csvname = NULL,dataset = NULL, useGtkBuilder = TRUE)
rattle(csvname = NULL,dataset = NULL, useGtkBuilder = TRUE)
library(rattle)
rattle(csvname = NULL,dataset = NULL, useGtkBuilder = TRUE)
Baseball <- read.csv("D:/Mini Projects/Project_1/Baseball.txt", sep="")
View(Baseball)
baseball_data = subset(Baseball, Baseball$at_bats>=100)
baseball_data
View(baseball_data)
Baseball_data$batting_avg = baseball_data$hits / baseball_data$at_bats
Baseball_data$batting_avg = data.frame(baseball_data$hits / baseball_data$at_bats)
Baseball_data$batting_avg <- (baseball_data$hits / baseball_data$at_bats)
baseball_data$batting_avg <- (baseball_data$hits / baseball_data$at_bats)
plot(baseball_data$homeruns, baseball_data$batting_avg)
plot(baseball_data$batting_avg,baseball_data$homeruns)
lm(baseball_data$homeruns ~ baseball_data$batting_avg, data = baseball_data)
br <- lm(baseball_data$homeruns ~ baseball_data$batting_avg, data = baseball_data)
abline(br)
residuals(br)
plot(residuals(br),fitted(br))
log(baseball_data$homeruns)
baseball_data$loghr<-log(baseball_data$homeruns)
brl<- lm(baseball_data$batting_avg ~ baseball_data$loghr, data = baseball_data)
baseball_data1 = subset(baseball_data, baseball_data$loghr!=Inf or baseball_data$loghr != -Inf)
baseball_data1 = subset(baseball_data, baseball_data$loghr!=Inf or baseball_data$loghr != -Inf)
baseball_data1 = subset(baseball_data, baseball_data$loghr!=Inf | baseball_data$loghr != -Inf)
View(baseball_data1)
View(baseball_data1)
baseball_data1 = subset(baseball_data, baseball_data$loghr!=Inf & baseball_data$loghr != -Inf)
View(baseball_data1)
brl<- lm(baseball_data1$batting_avg ~ baseball_data1$loghr, data = baseball_data1)
abline(brl)
plot(baseball_data1$batting_avg, baseball_data1$loghr)
abline(brl)
brl<- lm(baseball_data1$batting_avg ~ baseball_data1$loghr, data = baseball_data1)
brl
abline(brl)
plot(residuals(br)~fitted(br))
baseball_data = subset(Baseball, Baseball$at_bats>=100)
baseball_data
baseball_data$batting_avg <- (baseball_data$hits / baseball_data$at_bats)
plot(baseball_data$batting_avg,baseball_data$homeruns)
br <- lm(baseball_data$homeruns ~ baseball_data$batting_avg, data = baseball_data)
abline(br)
baseball_data$batting_avg <- (baseball_data$hits / baseball_data$at_bats)
plot(baseball_data$batting_avg,baseball_data$homeruns)
br <- lm(baseball_data$homeruns ~ baseball_data$batting_avg, data = baseball_data)
abline(br)
height = c(176, 154, 138, 196, 132, 176, 181, 169, 150, 175)
bodymass = c(82, 49, 53, 112, 47, 69, 77, 71, 62, 78)
lm(height ~ bodymass)
model <- lm(height ~ bodymass)
par(mfrow = c(2,2))
plot(fitted(model),residuals(model))
qqnorm(model)
setwd("~/YES Bank HACK/round_3")
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
View(train_set)
sample_set = read.csv("sample_cluster.csv", header = TRUE)
sample_set = read.csv("sample_clusters.csv", header = TRUE)
View(sample_set)
str(train_set)
sum(is.na(train_set$credit_amount))
boxplot(train_set$credit_amount)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
x <- train_set$credit_amount
train_set$credit_amount <- remove_outliers(x)
boxplot(train_set$credit_amount)
qnt <- quantile(x, probs=c(.75, .75), na.rm = na.rm, ...)
qnt <- quantile(x, probs=c(.25, .95), na.rm = na.rm, ...)
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
y <- x
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .95), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
x <- train_set$credit_amount
train_set$credit_amount <- remove_outliers(x)
boxplot(train_set$credit_amount)
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .95), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
x <- train_set$credit_amount
train_set$credit_amount <- remove_outliers(x)
boxplot(train_set$credit_amount)
boxplot(train_set$credit_amount)
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .98), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
x <- train_set$credit_amount
train_set$credit_amount <- remove_outliers(x)
boxplot(train_set$credit_amount)
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .50), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
x <- train_set$credit_amount
train_set$credit_amount <- remove_outliers(x)
boxplot(train_set$credit_amount)
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.20, .50), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
x <- train_set$credit_amount
train_set$credit_amount <- remove_outliers(x)
boxplot(train_set$credit_amount)
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .40), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
x <- train_set$credit_amount
train_set$credit_amount <- remove_outliers(x)
boxplot(train_set$credit_amount)
train_set = read.csv("Yes_Bank_Train.csv", header = TRUE)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .30), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
train_set$credit_amount <- remove_outliers(x)
boxplot(train_set$credit_amount)
